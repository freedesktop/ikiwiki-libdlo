= Quirks =

Some DisplayLink devices may report a class code which will cause them to get matched with a Linux kernel input or cdrom driver, before the displaylink-mod kernel framebuffer driver has a chance to see the device.  This is because DisplayLink devices may come up in a default configuration other than #1, in order to provide a special install path on Windows.  In all cases, if the USB configuration of the DisplayLink device is set to 1 (from whatever the default is, which is usually 2), then the DisplayLink device will report no special class code, and will get matched against the correct driver.

So how can the devices which won't work by default be handled?

= Solutions =

== udev rule ==

One solution may be a udev script and utility solution like this:

cat /etc/udev/rules.d/60-displaylink.rules
# DisplayLink devices always have the active configuration on configuration #1
SYSFS{idVendor}=="17e9", SYSFS{bConfigurationValue}=="2", RUN+="/usr/bin/dlconfig /sys%p/bConfigurationValue"

cat /usr/bin/dlconfig
#! /bin/bash
if [ -e /sys$1/device/bConfigurationValue ]; then
    echo 1 > /sys$1/device/bConfigurationValue
fi;

if [ -e /sys$1/bConfigurationValue ]; then
    echo 1 > /sys$1/bConfigurationValue
fi;

This results in the configuration being switched for DL devices. It works on both HID and MSC variants of the autoinstall – tested on a Pegasus adapter and the HP dock. It’s probably not the neatest solution – maybe there’s a way to set the configuration without an extra executable, and there may be a better way to discover the correct path for bConfigurationValue.

This method is problematic, because it creates a new dependency on udev scripts, which may not get picked up by every Linux distribution, and it's not precidented.

== blacklisting in the HID and mass storage (MSC) class drivers ==

This has lots of precedents, but there are problems.  Some HID interfaces expose real functionality (like dock buttons) which others exist only to hide the main displaylink device to prevent unwanted Windows dialogs.  If the match is done on PID, it can only match historical devices. That said, HID blacklisting for the limited set of DisplayLink devices would be easily feasible: http://lxr.linux.no/linux+v2.6.30/drivers/hid/usbhid/hid-quirks.c

And for DisplayLink, there are many PIDs which show as Mass Storage class, and there is no important case where Linux would benefit from access to the driver, so a VID match would be better.  But the mass storage driver's logic would have to be modified to allow a VID match on all PIDs: http://lxr.linux.no/linux+v2.6.30/drivers/usb/storage/usual-tables.c 

== usb-modeswitch ==

There are other types of devices which have similar behaviors.  Some of these use the usb-modeswitch package to allow a user to easily switch configuration.  Support for the affected DisplayLink devices could be integrated with http://packages.debian.org/sid/usb-modeswitch 

= Lists of DisplayLink PIDs of each type =

== Appear as USB HID ==

Some DisplayLink devices appear to be USB HID (input) devices.  They come up in a configuration other than #1, and should be switched to USB configuration #1 to enable normal use of the device.  This is done to prevent Win XP's Found New Hardware Wizard from appearing when the device is connected. See "Background" below.

Affected devices as of July 2009

{{{#!CSV ,
Samsung Ubisync 940UX, PID 0x0101
Samsung 22” monitor, PID 0x0105
LG L206WU, PID 0x0120
LG L226WU, PID 0x0121
HP Dock, PID 0x01d4
}}}

== Appear as USB Mass Storage ==

In order to support providing Windows Drivers on device in flash, some DisplayLink devices appear at boot to be CDROM devices.

These device's default USB configuration returns class code = mass storage, vendor ID = DisplayLink, and product ID matching the particular DisplayLink device.  Only when the device is switched to configuration #1 does the device function as a display.  That configuration shows no class code, while showing the same vendor and product IDs.

The following devices have this configuration, as of July 2009

{{{#!CSV ,
 Product Name, PID
 product_name = 'VNS Graphics Adapter', pid = 0x0130
 product_name = 'test Osprey', pid = 0x013a
 product_name = 'Graphics Adapter', pid = 0x0137
 product_name = 'DL-195 Adapter', pid = 0x013C
 product_name = 'DL-195 Adapter', pid = 0x025C
 product_name = 'DL-195 Auto-install', pid = 0x0130
 product_name = 'DL-165 Adapter', pid = 0x013C
 product_name = 'IOI WVGA', pid = 0x0280
 product_name = 'Buffalo FTD-W71USB', pid = 0x025B
 product_name = 'Infocus Projector', pid = 0x0301
 product_name = 'Buffalo FTD-W71USB', pid = 0x025B
 product_name = 'Buffalo FTD-W71USB', pid = 0x4028
 product_name = 'Buffalo FTD-W71USB', pid = 0x025B
 product_name = 'Osprey-CLAA070LC0', pid = 0x8051
 product_name = 'Hawk', pid = 0x8044
 product_name = 'Osprey-WXGA', pid = 0x8051
 product_name = 'LCOS Projector SVGA', pid = 0x0261
 product_name = 'UMD-700', pid = 0x025B
 product_name = 'IO DATA Mini Display', pid = 0x028B
 product_name = 'AN2440D3', pid = 0x028F
 product_name = 'Kensington Dock', pid = 0x8032
 product_name = 'Kensington Dock', pid = 0x4032
 product_name = 'Pegasus DVI', pid = 0x8063
 product_name = 'USB-DVI Adapter', pid = 0x0221
 product_name = 'Adamo LCD Monitor', pid = 0x02BF
 product_name = 'KTG Office Dock', pid = 0x4032
 product_name = 'Leo Dock', pid = 0xC032
 product_name = 'Leo Dock', pid = 0x8074
 product_name = 'Leo Dock', pid = 0xC032
 product_name = 'OllieB Dev Board', pid = 0xC002
 product_name = 'AN2440D3', pid = 0x028F
 product_name = 'AN2440D3', pid = 0x0141
 product_name = 'DL-165_SPI', pid = 0x0292
 product_name = 'DL-125_SPI', pid = 0x0293
 product_name = 'nanovision MiMo', pid = 0x401A
 product_name = 'nanovision MiMo', pid = 0x016C
 product_name = 'SB TG', pid = 0x016F
 product_name = 'Nanovision MiMo', pid = 0x016A
 product_name = 'USB to VGA Adapter', pid = 0x02A4
 product_name = 'TVI USB Monitor', pid = 0x0219
 product_name = 'USB-VGA Adapter', pid = 0x021a
 product_name = 'UWB Display Adapter', pid = 0x0208
 product_name = 'ACCELL USB-VGA', pid = 0x021D
 product_name = 'ACCELL VGA Adapter', pid = 0x021C
 product_name = 'VodafoneUVGA Adapter', pid = 0x0209
 product_name = 'VodafoneUVGA Adapter', pid = 0x0209
 product_name = '195 USB Adapter', pid = 0x0238
 product_name = '195 USB Adapter', pid = 0x0141
 product_name = 'Mini Monitor', pid = 0x028E
 product_name = 'V-Jack Osprey', pid = 0x015A
 product_name = 'WUSB-921', pid = 0x02A3
 product_name = 'UV195', pid = 0x02A5
 product_name = 'UV165', pid = 0x02A6
 product_name = 'UV-DLA1-DLRO', pid = 0x02A7
 product_name = 'Mini Display', pid = 0x4012
 product_name = 'Mini Display', pid = 0x4012
 product_name = 'Mini Display', pid = 0x028B
 product_name = 'DisplayLink Adapter', pid = 0x02A7
 product_name = 'GH-USD7', pid = 0x028B
 product_name = 'USB TO DVI', pid = 0x0140
 product_name = 'USB TO DVI', pid = 0x02A8
 product_name = 'USB LCD', pid = 0x019F
 product_name = 'MEDL display adaptor', pid = 0x024D
 product_name = 'VL-165D Auto 061509', pid = 0x0176
 product_name = 'I-O DATA LCD-USB7X', pid = 0x0153
 product_name = 'Infocus Projector', pid = 0x0301
 product_name = 'Infocus Projector', pid = 0x0300
 product_name = 'Infocus Projector', pid = 0x0302
 product_name = 'Infocus Projector', pid = 0x0300
 product_name = 'Infocus Projector', pid = 0x0302
 product_name = 'Infocus Projector', pid = 0x0302
 product_name = 'Infocus Projector', pid = 0x0306
 product_name = 'Infocus Projector', pid = 0x0305
 product_name = 'Infocus Projector', pid = 0x0307
 product_name = 'Infocus Merlin Projector', pid = 0x0300
 product_name = 'Infocus Merlin Projector', pid = 0x0300
 product_name = 'MINIMONITOR', pid = 0x01D1
 product_name = 'I-O DATA LCD-USB7X', pid = 0x01D1
 product_name = 'I-O DATA LCD-USB7X', pid = 0x01D1
 product_name = 'Touch screen mini-mo', pid = 0x0180
 product_name = 'Touch screen mini-mo', pid = 0x01D0
 product_name = 'AL5720_rev3_195_SPI', pid = 0x020E
 product_name = 'AL5730_Rev1_165_SPI', pid = 0x0210
 product_name = 'VT ViBook 2', pid = 0x023D
 product_name = 'ViBook Plus', pid = 0x023E
 product_name = 'DL-195 Adapter', pid = 0x025B
 product_name = 'USB-DVI Adapter', pid = 0x0221
 product_name = 'MMD-2001B1-165', pid = 0x0223
 product_name = 'Tac-Eye USB Adaptor', pid = 0x0275
 product_name = 'BUFFALO FTD-W71USB', pid = 0x025B

}}}

= Background =

A bit more background on the "whys", so the Linux solution can be understood:

It's not uncommon for USB devices play some games with USB class
codes, in order to improve the Windows XP install experience.  Many
DisplayLink devices do this.  Unfortunately, it creates a hassle for
Linux.  But there are solutions, we just need to get them in place.
Here's the background:

On Windows XP, the Found New Hardware Wizard pops up when any device
without drivers arrives.  Unfortunately, it's a UI that users
typically get lost in (without ultimately finding appropriate
drivers).  Vista and now particularly Win7 do a much better job, but
XP is still an important case.

To make the device install experience on XP better, companies take
pains to avoid FNHW: stickers over the USB connector saying "install
driver disk first", etc.  They may also have the device report a USB
class code that is matched by an in-box driver that's otherwise
benign, so FNHW is never shown. HID matches that bill.  Windows pnp
logic is always to use the most specific driver match - so it will
silently match HID initially, but once drivers are installed (e.g.
from disk, or from internet) that match more specifically on VID/PID,
Windows will automatically prefer those drivers over those that only
match on the class code.

The second common scenario is the device may actually appear first as
a USB CDROM with Windows drivers on it, and only once the proper
configuration is set, it turns into the "real" device. On DisplayLink
devices - the core graphics function is always on configuration #1
(even if the default configuration is something else like 2, to hide
the device without in-OS drivers).

You can see how libdlo handles this (not smart or graceful, but does
make libdlo work 100% of the time) at
http://cgit.freedesktop.org/libdlo/tree/src/dlo_usb.c around line 319.
